@startuml Architecture_Overview

!theme plain
title Arquitetura do Simulador de HidrÃ´metro v2.0\nArquitetura Multi-Thread com VisualizaÃ§Ã£o DinÃ¢mica

skinparam componentStyle rectangle
skinparam packageStyle rectangle
skinparam rectangleFontSize 11

!define LIGHTBLUE #E1F5FE
!define LIGHTGREEN #E8F5E8  
!define LIGHTYELLOW #FFF9C4
!define LIGHTPINK #FCE4EC
!define LIGHTGRAY #F5F5F5
!define LIGHTORANGE #FFF3E0

package "Application Layer" LIGHTBLUE {
    [Main Application] as Main
    [Signal Handler] as Signals
    [Logger System] as Logger
    note right of Main : Ponto de entrada\nControle de sinais Ctrl+C\nGerenciamento do Logger
}

package "Control Layer (MVC Controller)" LIGHTGREEN {
    [Simulator Controller] as Simulator
    [Input Thread] as InputThread
    [Image Thread] as ImageThread
    note right of Simulator : CoordenaÃ§Ã£o multi-thread\nControle nÃ£o-bloqueante (termios)\nGeraÃ§Ã£o por marcos (1mÂ³)
}

package "Business Logic (MVC Model)" LIGHTYELLOW {
    [Hydrometer Entity] as Hydrometer
    [Pipe Calculator IN] as PipeIN
    [Pipe Calculator OUT] as PipeOUT
    [Update Thread] as UpdateThread
    note right of Hydrometer : Contador thread-safe (atomic)\nDimensÃµes residenciais (15mm)\nMediÃ§Ã£o contÃ­nua background
    note right of PipeIN : Darcy-Weisbach completo\nRegime laminar/turbulento\nVazÃ£o mÃ¡xima dinÃ¢mica (~17 mÂ³/h)
}

package "Presentation Layer (MVC View)" LIGHTPINK {
    [Image Generator] as Image
    [Cairo Graphics] as Cairo
    [Dynamic Scaling] as Scaling
    note right of Image : Escala automÃ¡tica\nDesign realÃ­stico com gradientes\nTrigger a cada 1000L
}

package "Infrastructure" LIGHTGRAY {
    [Threading System] as Threads
    [Atomic Operations] as Atomic
    [Smart Pointers] as SmartPtr
    [File System] as FileSystem
    [Terminal Control] as Terminal
}

package "Configuration" LIGHTORANGE {
    [Constants] as Config
    [Key Mappings] as Keys
    [Log Levels] as LogLevels
    note right of Config : ParÃ¢metros residenciais\nConstantes fÃ­sicas\nPaths de output
}

' Main relationships - Architecture
Main --> Simulator : creates & manages
Main --> Signals : registers handlers
Main --> Logger : controls modes

' Controller relationships
Simulator --> Hydrometer : manages
Simulator --> Image : coordinates
Simulator --> InputThread : spawns
Simulator --> ImageThread : spawns

' Model relationships  
Hydrometer --> PipeIN : composes
Hydrometer --> PipeOUT : composes
Hydrometer --> UpdateThread : spawns

' View relationships
Image --> Cairo : uses
Image --> Scaling : implements
Image --> FileSystem : saves to

' Threading relationships
InputThread --> Terminal : controls
ImageThread --> Image : triggers
UpdateThread --> Hydrometer : updates

' Infrastructure dependencies
Simulator ..> Threads : uses
Hydrometer ..> Atomic : uses
Simulator ..> SmartPtr : uses
All ..> Config : uses
Image --> Cairo : renders with

' Infrastructure dependencies  
Simulator ..> Threads : uses
Hydrometer ..> Atomic : synchronizes with
Simulator ..> SmartPtr : manages memory with
Image ..> FileSystem : saves to

' Data Flow
Main : User Input
Main : Status Display
Simulator : Flow Generation Thread
Simulator : Image Update Thread  
Hydrometer : Measurement Thread
Pipe : IN: Flow Input
Pipe : OUT: Flow Output (90%)
Image : PNG Generation

' Threading arrows
Simulator -down-> Hydrometer : "âš¡ Thread Communication"
Simulator -down-> Image : "ðŸŽ¨ Image Updates"
Hydrometer -left-> Pipe : "ðŸ’§ Flow Data"

' External interfaces
cloud "User Interface" as UI {
    [Console Output]
    [PNG Files]
    [Keyboard Input]
}

Main <--> UI : interacts
Image --> UI : generates

' Performance notes
note bottom : **Performance Characteristics**\nâ€¢ Multi-threaded: 3 concurrent threads\nâ€¢ Real-time: 100ms update intervals\nâ€¢ Memory safe: RAII + smart pointers\nâ€¢ Thread safe: atomic operations\nâ€¢ Visual: 3s image generation cycle

@enduml
