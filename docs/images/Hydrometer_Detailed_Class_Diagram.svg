<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="516px" preserveAspectRatio="none" style="width:962px;height:516px;background:#000000;" version="1.1" viewBox="0 0 962 516" width="962px" zoomAndPan="magnify"><defs/><g><rect fill="#152220" height="1" style="stroke: #152220; stroke-width: 1.0;" width="1" x="0" y="0"/><rect fill="#33FF02" height="21.2969" style="stroke: #33FF02; stroke-width: 1.0;" width="955" x="5" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="365" x="6" y="20">[From detailed_class_diagram.puml (line 108) ]</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="40.2969"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="369" x="5" y="56.5938">@startuml Hydrometer_Detailed_Class_Diagram</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="72.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="89.1875"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="955" x="5" y="105.4844">title Diagrama de Classes Detalhado - Simulador de Hidrômetro v2.0\nPadrões: Composite, Strategy, Observer, RAII, MVC</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="121.7813"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="15" x="5" y="138.0781">...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="175" x="5" y="154.375">... ( skipping 82 lines )</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="15" x="5" y="170.6719">...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="24" x="45" y="186.9688">==</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="426" x="45" y="203.2656">+ Pipe(diameter: float, length: float, roughness: float)</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="12" x="45" y="219.5625">--</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="177" x="45" y="235.8594">+ getDiameter() : float</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="161" x="45" y="252.1563">+ getLength() : float</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="194" x="45" y="268.4531">+ getRoughness() : float</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="178" x="45" y="284.75">+ getFlowRate() : float</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="174" x="45" y="301.0469">+ getMaxFlow() : float</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="12" x="45" y="317.3438">--</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="838" x="45" y="333.6406">+ maxFlowForDeltaP(deltaP: double = 100000,\n                   rho: double = 998.0,\n                   mu: dou ...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="290" x="45" y="349.9375">+ setFlowRate(flowRate: float) : void</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="12" x="45" y="366.2344">--</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="178" x="45" y="382.5313">&lt;&lt;Strategy Pattern&gt;&gt;</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="275" x="45" y="398.8281">Equação Darcy-Weisbach completa</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="287" x="45" y="415.125">Detecção automática de regime (Re)</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="260" x="45" y="431.4219">Colebrook-White para turbulento</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="327" x="45" y="447.7188">Convergência iterativa (precisão 0.001%)</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="10" x="25" y="464.0156">}</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="10" x="5" y="480.3125">}</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="295" x="45" y="496.6094">Implementa equação Darcy-Weisbach</text><text fill="#FF0000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="106" x="10" y="512.9063">Syntax Error?</text><!--MD5=[9011b3b348366e86bca07dd149a8f678]
@startuml Hydrometer_Detailed_Class_Diagram


title Diagrama de Classes Detalhado - Simulador de Hidrômetro v2.0\nPadrões: Composite, Strategy, Observer, RAII, MVC

skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam packageStyle rectangle

package "Main Application" {
    class Main {
        {static} + main() : int
        {static} + signalHandler(int) : void
        - -
        Ponto de entrada da aplicação
        Controle de sinais (Ctrl+C)
        Gerenciamento do Logger
    }
}

package "Core Simulation" {
    class Simulator {
        - running : atomic<bool>
        - hidrometer : unique_ptr<Hidrometer>
        - inputThread : thread
        - imageThread : thread  
        - image : Image
        ==
        + Simulator()
        + ~Simulator()
        - -
        + getHidrometer() : Hidrometer*
        + getPipeIN() : Pipe*
        + getPipeOUT() : Pipe* 
        + getCounter() : int
        + getHidrometerStatus() : bool
        + isRunning() : bool
        - -
        + run() : void
        + stop() : void
        - -
        - getKey() : int
        - updateFlow() : void {thread}
        - imageUpdateLoop() : void {thread}
        - -
        <<MVC Controller>>
        Coordena simulação multi-thread
        Entrada não-bloqueante (termios)
        Geração de imagens por marco (1m³)
    }

    class Hidrometer {
        - pipeIN : unique_ptr<Pipe>
        - pipeOUT : unique_ptr<Pipe>
        - update_thread : thread
        - running : atomic<bool>
        - counter : atomic<int>
        - status : atomic<bool>
        - counterFloat : float
        ==
        + Hidrometer(diameterIN: float = 0.015f,\n            lengthIN: float = 0.15f,\n            roughnessIN: float = 0.00005f,\n            diameterOUT: float = 0.015f,\n            lengthOUT: float = 0.15f,\n            roughnessOUT: float = 0.00005f)
        + ~Hidrometer()
        - -
        + getPipeIN() : Pipe*
        + getPipeOUT() : Pipe*
        + getCounter() : int
        + getStatus() : bool
        - -
        + activate() : void
        + deactivate() : void
        - -
        - update() : void {thread}
        - -
        <<MVC Model>>
        Dimensões residenciais padrão (15mm)
        Counter thread-safe com precisão de litros
        Medição contínua em background
    }
}

package "Hydraulic System" {
    class Pipe {
        - flowRate : float
        - maxFlow : float
        - diameter : float
        - length : float  
        - roughness : float
        ==
        + Pipe(diameter: float, length: float, roughness: float)
        - -
        + getDiameter() : float
        + getLength() : float
        + getRoughness() : float
        + getFlowRate() : float
        + getMaxFlow() : float
        - -
        + maxFlowForDeltaP(deltaP: double = 100000,\n                   rho: double = 998.0,\n                   mu: double = 1.002e-3,\n                   g: double = 9.80665) : double
        + setFlowRate(flowRate: float) : void
        - -
        <<Strategy Pattern>>
        Equação Darcy-Weisbach completa
        Detecção automática de regime (Re)
        Colebrook-White para turbulento
        Convergência iterativa (precisão 0.001%)
    }
}
        Implementa equação Darcy-Weisbach
        Calcula perdas de carga hidráulicas
    }
}

package "Visualization" {
    class Image {
        - surface : cairo_surface_t*
        - cr : cairo_t*
        - width : int
        - height : int
        ==
        + Image(width: int = 400, height: int = 400)
        + ~Image()
        - -
        + generate_image(counter: int, flowRate: float,\n                maxFlowRate: float, name: string) : void
        - -
        <<MVC View>>
        Escala dinâmica baseada em maxFlowRate
        Design realístico com gradientes Cairo
        Ponteiro proporcional à vazão atual
        Display digital formato %06d L
    }
}

package "Utilities" {
    enum LogLevel {
        STARTUP
        SHUTDOWN  
        RUNTIME
        DEBUG
    }
    
    class Logger <<static>> {
        {static} - currentMode : LogLevel
        ==
        {static} + log(level: LogLevel, message: string) : void
        {static} + setMode(mode: LogLevel) : void
        {static} + logRuntime(status: string, counter: double,\n                      flowIN: double, flowOUT: double) : void
        - -
        Sistema de logs estruturado
        Conversão automática de unidades (m³)
        Output organizado em 4 linhas
    }
}

package "Configuration" {
    enum Key {
        KEY_UP = 1000
        KEY_DOWN = 1001
        KEY_RIGHT = 1002
        KEY_LEFT = 1003
        KEY_ESC = 27
    }
    
    class Constants <<static>> {
        {static} + IMAGE_PATH : string = "medicoes_202311250013/"
        {static} + DEFAULT_WIDTH : int = 400
        {static} + DEFAULT_HEIGHT : int = 400
        - -
        Parâmetros Residenciais Padrão:
        {static} + DIAMETER : float = 0.015f {15mm}
        {static} + LENGTH : float = 0.15f {150mm}
        {static} + ROUGHNESS : float = 0.00005f {PVC/metal}
        - -
        Constantes Físicas:
        {static} + RHO : double = 998.0 {kg/m³}
        {static} + MU : double = 1.002e-3 {Pa·s}
        {static} + G : double = 9.80665 {m/s²}
}

Main - -> Simulator : "creates & manages"
Simulator *- - Hidrometer : "composition\n1..1"
Simulator *- - Image : "composition\n1..1"
Hidrometer *- - Pipe : "composition\n1..2 (IN/OUT)"

Simulator ..> Logger : "uses"
Simulator ..> Key : "uses"
Image ..> Constants : "uses"
Pipe ..> Constants : "uses"

Simulator ||- -|| Simulator : "inputThread"
Simulator ||- -|| Simulator : "imageThread"
Hidrometer ||- -|| Hidrometer : "updateThread"

note right of Simulator
  **MVC Controller**
  - Gerencia 3 threads concorrentes
  - Entrada não-bloqueante (termios)
  - Geração de imagens por marco
  - Controle de vazão incremental
end note

note right of Hidrometer  
  **MVC Model + Composite**
  - Contador thread-safe (atomic)
  - Composição de 2 Pipes
  - Medição contínua background
  - Dimensões residenciais padrão
end note

note right of Image
  **MVC View + Strategy**
  - Escala dinâmica automática
  - Cairo Graphics profissional
  - Trigger a cada 1000L (1m³)
  - Design realístico completo
end note

note right of Pipe
  **Strategy Pattern**
  - Darcy-Weisbach completo
  - Regime laminar/turbulento
  - Convergência iterativa
  - Colebrook-White equation
end note

@enduml

PlantUML version 1.2020.02(Sun Mar 01 07:22:07 BRT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.28+6-post-Ubuntu-1ubuntu122.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: pt
Country: BR
--></g></svg>