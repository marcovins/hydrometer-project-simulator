@startuml Hydrometer_Detailed_Class_Diagram

!define RECTANGLE class

title Diagrama de Classes Detalhado - Simulador de Hidrômetro v2.0\nPadrões: Composite, Strategy, Observer, RAII, MVC

skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam packageStyle rectangle

package "Main Application" {
    class Main {
        {static} + main() : int
        {static} + signalHandler(int) : void
        --
        Ponto de entrada da aplicação
        Controle de sinais (Ctrl+C)
        Gerenciamento do Logger
    }
}

package "Core Simulation" {
    class Simulator {
        - running : atomic<bool>
        - hidrometer : unique_ptr<Hidrometer>
        - inputThread : thread
        - imageThread : thread  
        - image : Image
        ==
        + Simulator()
        + ~Simulator()
        --
        + getHidrometer() : Hidrometer*
        + getPipeIN() : Pipe*
        + getPipeOUT() : Pipe* 
        + getCounter() : int
        + getHidrometerStatus() : bool
        + isRunning() : bool
        --
        + run() : void
        + stop() : void
        --
        - getKey() : int
        - updateFlow() : void {thread}
        - imageUpdateLoop() : void {thread}
        --
        <<MVC Controller>>
        Coordena simulação multi-thread
        Entrada não-bloqueante (termios)
        Geração de imagens por marco (1m³)
    }

    class Hidrometer {
        - pipeIN : unique_ptr<Pipe>
        - pipeOUT : unique_ptr<Pipe>
        - update_thread : thread
        - running : atomic<bool>
        - counter : atomic<int>
        - status : atomic<bool>
        - counterFloat : float
        ==
        + Hidrometer(diameterIN: float = 0.015f,\n            lengthIN: float = 0.15f,\n            roughnessIN: float = 0.00005f,\n            diameterOUT: float = 0.015f,\n            lengthOUT: float = 0.15f,\n            roughnessOUT: float = 0.00005f)
        + ~Hidrometer()
        --
        + getPipeIN() : Pipe*
        + getPipeOUT() : Pipe*
        + getCounter() : int
        + getStatus() : bool
        --
        + activate() : void
        + deactivate() : void
        --
        - update() : void {thread}
        --
        <<MVC Model>>
        Dimensões residenciais padrão (15mm)
        Counter thread-safe com precisão de litros
        Medição contínua em background
    }
}

package "Hydraulic System" {
    class Pipe {
        - flowRate : float
        - maxFlow : float
        - diameter : float
        - length : float  
        - roughness : float
        ==
        + Pipe(diameter: float, length: float, roughness: float)
        --
        + getDiameter() : float
        + getLength() : float
        + getRoughness() : float
        + getFlowRate() : float
        + getMaxFlow() : float
        --
        + maxFlowForDeltaP(deltaP: double = 100000,\n                   rho: double = 998.0,\n                   mu: double = 1.002e-3,\n                   g: double = 9.80665) : double
        + setFlowRate(flowRate: float) : void
        --
        <<Strategy Pattern>>
        Equação Darcy-Weisbach completa
        Detecção automática de regime (Re)
        Colebrook-White para turbulento
        Convergência iterativa (precisão 0.001%)
    }
}
        Implementa equação Darcy-Weisbach
        Calcula perdas de carga hidráulicas
    }
}

package "Visualization" {
    class Image {
        - surface : cairo_surface_t*
        - cr : cairo_t*
        - width : int
        - height : int
        ==
        + Image(width: int = 400, height: int = 400)
        + ~Image()
        --
        + generate_image(counter: int, flowRate: float,\n                maxFlowRate: float, name: string) : void
        --
        <<MVC View>>
        Escala dinâmica baseada em maxFlowRate
        Design realístico com gradientes Cairo
        Ponteiro proporcional à vazão atual
        Display digital formato %06d L
    }
}

package "Utilities" {
    enum LogLevel {
        STARTUP
        SHUTDOWN  
        RUNTIME
        DEBUG
    }
    
    class Logger <<static>> {
        {static} - currentMode : LogLevel
        ==
        {static} + log(level: LogLevel, message: string) : void
        {static} + setMode(mode: LogLevel) : void
        {static} + logRuntime(status: string, counter: double,\n                      flowIN: double, flowOUT: double) : void
        --
        Sistema de logs estruturado
        Conversão automática de unidades (m³)
        Output organizado em 4 linhas
    }
}

package "Configuration" {
    enum Key {
        KEY_UP = 1000
        KEY_DOWN = 1001
        KEY_RIGHT = 1002
        KEY_LEFT = 1003
        KEY_ESC = 27
    }
    
    class Constants <<static>> {
        {static} + IMAGE_PATH : string = "medicoes_202311250013/"
        {static} + DEFAULT_WIDTH : int = 400
        {static} + DEFAULT_HEIGHT : int = 400
        --
        Parâmetros Residenciais Padrão:
        {static} + DIAMETER : float = 0.015f {15mm}
        {static} + LENGTH : float = 0.15f {150mm}
        {static} + ROUGHNESS : float = 0.00005f {PVC/metal}
        --
        Constantes Físicas:
        {static} + RHO : double = 998.0 {kg/m³}
        {static} + MU : double = 1.002e-3 {Pa·s}
        {static} + G : double = 9.80665 {m/s²}
}

' Relationships - Arquitetura Principal
Main --> Simulator : "creates & manages"
Simulator *-- Hidrometer : "composition\n1..1"
Simulator *-- Image : "composition\n1..1"
Hidrometer *-- Pipe : "composition\n1..2 (IN/OUT)"

' Dependencies - Funcionalidades
Simulator ..> Logger : "uses"
Simulator ..> Key : "uses"
Image ..> Constants : "uses"
Pipe ..> Constants : "uses"

' Threading Relationships
Simulator ||--|| Simulator : "inputThread"
Simulator ||--|| Simulator : "imageThread"
Hidrometer ||--|| Hidrometer : "updateThread"

' Notes sobre Padrões
note right of Simulator
  **MVC Controller**
  - Gerencia 3 threads concorrentes
  - Entrada não-bloqueante (termios)
  - Geração de imagens por marco
  - Controle de vazão incremental
end note

note right of Hidrometer  
  **MVC Model + Composite**
  - Contador thread-safe (atomic)
  - Composição de 2 Pipes
  - Medição contínua background
  - Dimensões residenciais padrão
end note

note right of Image
  **MVC View + Strategy**
  - Escala dinâmica automática
  - Cairo Graphics profissional
  - Trigger a cada 1000L (1m³)
  - Design realístico completo
end note

note right of Pipe
  **Strategy Pattern**
  - Darcy-Weisbach completo
  - Regime laminar/turbulento
  - Convergência iterativa
  - Colebrook-White equation
end note

@enduml

' Dependencies
Simulator ..> HidrometerConstants : "uses"
Hidrometer ..> HidrometerConstants : "uses"
Hidrometer ..> PhysicsConstants : "uses"
Pipe ..> PhysicsConstants : "uses"
Image ..> ImageConstants : "uses"

' Threading annotations
note top of Simulator : **Multi-Threading Controller**\n• Main thread: coordenação\n• InputThread: geração vazão\n• ImageThread: atualização visual\n• Atomic operations para thread-safety

note right of Hidrometer : **Thread-Safe Entity**\n• Update thread própria\n• Atomic counters\n• Simulação tempo real\n• Perda de carga 10%

note bottom of Pipe : **Physics Simulation**\n• Equação Darcy-Weisbach\n• Regime turbulento/laminar\n• Convergência iterativa\n• Perdas de carga realísticas

note left of Image : **Cairo Graphics**\n• Renderização vetorial\n• PNG output\n• Visual realístico\n• Atualização dinâmica

' Patterns annotations
note as N1
    **Padrões Implementados:**
    • **Composite**: Hidrometer + 2 Pipes
    • **Strategy**: Diferentes cálculos hidráulicos
    • **Observer**: Threads observam mudanças
    • **Resource Management**: RAII com smart pointers
end note

@enduml
